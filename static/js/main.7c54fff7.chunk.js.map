{"version":3,"sources":["components/TensorflowQ.js","App.js","serviceWorker.js","index.js"],"names":["TensorflowQ","props","findAnswers","passage","question","a","model","answers","console","log","renderAnswer","answer","index","text","state","isTfReady","isModelReady","default_question","default_passage","handleChange","bind","event","this","setState","target","value","tf","qna","className","Nav","fill","variant","activeKey","Item","Link","href","Form","Group","controlId","Label","Control","as","rows","placeholder","onChange","readOnly","defaultValue","Button","varient","type","onClick","then","the_answers","onPress","map","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7c54fff7.chunk.js","sourcesContent":["import * as tf from '@tensorflow/tfjs';\r\nimport '@tensorflow/tfjs';\r\nimport * as qna from '@tensorflow-models/qna';\r\nimport React, { Component } from 'react'\r\nimport './TensorflowQ.min.css'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Form from 'react-bootstrap/Form'\r\nimport { Col } from 'react-bootstrap';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\nexport default class TensorflowQ extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isTfReady: false,\r\n            isModelReady: false,\r\n            default_question: \"Who is the CEO of Google?\",\r\n            default_passage: \"Google LLC is an American multinational technology company that specializes in Internet-related services and products, which include online advertising technologies, search engine, cloud computing, software, and hardware. It is considered one of the Big Four technology companies, alongside Amazon, Apple, and Facebook. Google was founded in September 1998 by Larry Page and Sergey Brin while they were Ph.D. students at Stanford University in California. Together they own about 14 percent of its shares and control 56 percent of the stockholder voting power through supervoting stock. They incorporated Google as a California privately held company on September 4, 1998, in California. Google was then reincorporated in Delaware on October 22, 2002. An initial public offering (IPO) took place on August 19, 2004, and Google moved to its headquarters in Mountain View, California, nicknamed the Googleplex. In August 2015, Google announced plans to reorganize its various interests as a conglomerate called Alphabet Inc. Google is Alphabet's leading subsidiary and will continue to be the umbrella company for Alphabet's Internet interests. Sundar Pichai was appointed CEO of Google, replacing Larry Page who became the CEO of Alphabet.\",\r\n            question: ' default question',\r\n            passage: 'default pessage',\r\n            answers: null,\r\n        };\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(event) {\r\n        this.setState({ default_question: event.target.value });\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await tf.ready(); // preparing TensorFlow\r\n        this.setState({ isTfReady: true, });\r\n\r\n        this.model = await qna.load(); // preparing MobileBERT model qna\r\n        this.setState({ isModelReady: true });\r\n    }\r\n\r\n    findAnswers = async (passage, question) => {\r\n        try {\r\n            // const question = this.state.default_question;\r\n            // const passage = this.state.default_passage;\r\n\r\n            const answers = await this.model.findAnswers(question, passage);\r\n\r\n            console.log('answers: ');\r\n            console.log(answers);\r\n\r\n            return answers;\r\n\r\n        } catch (error) {\r\n            console.log('Exception Error: ', error)\r\n        }\r\n    }\r\n\r\n    renderAnswer = (answer, index) => {\r\n        const text = answer.text;\r\n\r\n        return (\r\n\r\n            `${text}`\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        const { isTfReady, isModelReady, passage, question, answers } = this.state\r\n\r\n        const onPress = (passage, question) => {\r\n            this.findAnswers(passage, question).then((the_answers) => {\r\n                this.setState({ answers: the_answers });\r\n            })\r\n        }\r\n\r\n        return (\r\n\r\n            <div className=\"main-container\">\r\n                <div className='nav-container'>\r\n                    <Nav\r\n                        fill variant=\"tabs\"\r\n                        className=\"justify-content-end\"\r\n                        activeKey=\"/home\"\r\n                    >\r\n                        <Nav.Item>\r\n                            <Nav.Link href=\"#about-container\">About</Nav.Link>\r\n                        </Nav.Item>\r\n                        <Nav.Item>\r\n                            <Nav.Link href='#qna-container'>QnA</Nav.Link>\r\n                        </Nav.Item>\r\n                    </Nav>\r\n                </div>\r\n                <div className='about-container'>\r\n                    <div className='about-header'>\r\n                        ABOUT THE QnA SERVICE\r\n                    </div>\r\n                    <div className='about-qna'>\r\n                        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus nec ex sed metus eleifend vestibulum quis facilisis nulla. Proin viverra lobortis leo, eu mollis nisl dignissim vel. Vestibulum ante ipsum primis in faucibus orci luctus et ultrices posuere cubilia curae; Aliquam vehicula blandit dolor. Suspendisse potenti. Cras malesuada malesuada fringilla. Ut vitae pretium metus.<br />\r\n                        Etiam elementum urna id est maximus feugiat. Donec elit arcu, bibendum nec imperdiet eget, dictum maximus dolor. Etiam et risus quis ante ultricies pellentesque. Nam arcu turpis, maximus sit amet accumsan accumsan, viverra tempor turpis. Praesent ornare justo eu mauris vehicula pellentesque. Maecenas eu erat in enim tempor viverra. Proin tempor, leo vel ornare viverra, nisi mi fermentum neque, quis feugiat nulla urna a purus. Cras consequat nunc sit amet fermentum interdum.\r\n                    </div>\r\n                </div>\r\n                <div className='qna-container'>\r\n                    <b>\r\n                        TensorFlow.js ready? {isTfReady ? <p>✅</p> : 'Not ready'}\r\n                        BERT model qna ready?\r\n            {isModelReady ?\r\n                            <p>✅</p> : 'Not yet'\r\n                        }\r\n                    </b>\r\n                    <Form>\r\n                        <Form.Group controlId='exampleForm.ControlTextarea1'>\r\n                            <div className='form-font-co'>\r\n                                <Form.Label>Passage</Form.Label>\r\n                            </div>\r\n                            <Form.Control as='textarea' rows='8' placeholder='passage' onChange={text => this.setState({ passage: text })} value={this.state.default_passage} readOnly></Form.Control>\r\n                        </Form.Group>\r\n                        <Form.Group>\r\n                            <div className='form-font-co'>\r\n                                <Form.Label>Question</Form.Label>\r\n                            </div>\r\n                            <Form.Control as='textarea' rows='3' placeholder='question' onChange={this.handleChange} defaultValue={this.state.default_question}></Form.Control>\r\n                        </Form.Group>\r\n                        <div className='button-container'>\r\n                            <Button varient='primary' type='button' onClick={() => onPress(this.state.default_passage, this.state.default_question)}>\r\n                                Find Answer\r\n                            </Button>\r\n                        </div>\r\n                        <Form.Group>\r\n                            <div className='form-font-co'>\r\n                                <Form.Label>Answer</Form.Label>\r\n                            </div>\r\n                            <Form.Control as='textarea' value={isModelReady &&\r\n                                answers &&\r\n                                answers.map((a, index) => this.renderAnswer(a, index))} readOnly>\r\n                            </Form.Control>\r\n                        </Form.Group>\r\n                    </Form>\r\n                </div>\r\n            </div >\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport TensorflowQ from './components/TensorflowQ'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TensorflowQ />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}